# Webpackerを使用したRailsアプリのnginxサイト構成の例を引用、カスタマイズ
# https://github.com/rails/webpacker/blob/master/docs/deployment.md#nginx

# upstreamディレクティブ : バックエンドのアプリケーションサーバを指定
# pumaというサーバグループを作成
upstream puma {
  # appコンテナの3000番に接続
  # リバースプロキシするためにlocalhostではなくapp
  server app:3000;
}

# serverディレクティブ：仮想サーバーの定義
server {
  # localhost:80(コンテナ側)でリクエストを受付
  listen 80;
  server_name localhost;

  # ログ保管
  access_log /var/log/nginx/access_log;
  error_log /var/log/nginx/error_log;

  # publicフォルダに外部へ公開するHTML文書、画像が保存されている為
  # https://railsguides.jp/asset_pipeline.html
  root /app/public;

  # URIパスの代わりにpumaという名前付きロケーションを設定。内部リダイレクトで使用。
  location @puma {
    # お作法。バックエンドサーバに送信するヘッダを再定義
    # https://qiita.com/townsoft/items/3e2d410bbe65a364b603#proxy_set_header%E7%AD%89
    # proxy_passでupstreamで設定したサーバーグループpumaへ転送
    proxy_set_header X-Real-IP  $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header Host $http_host;
    proxy_pass http://puma;
  }

  # パスが/の時
  location / {
    # URIのパスを調べてファイル（静的コンテンツ）が存在すれば、そのファイル返す。
    # 存在しなければ、動的コンテンツとして@pumaに内部リダイレクトする。
    try_files $uri @puma;
  }

  # /assets/ /packs/に完全マッチする場合が対象
  location ~ ^/(assets|packs)/ {
    # 圧縮済みのファイルを配信。リソースを節約。
    gzip_static on;
    # データ圧縮アルゴリズム。オプション
    # brotli_static on;
    # 最大まで(10年)ブラウザキャッシュを使用する場合に使用
    expires max;
    # レスポンスヘッダーにつける値を設定
    add_header Cache-Control public;
  }

  # パスが/favicon.icoと完全一致する時。
  location = /favicon.ico {
    # ファイルが無いとき空ファイルを返却
    empty_gif;
    # アクセスログを捨てる
    access_log on;
    # エラーログ捨てる
    log_not_found on;
  }
  
  location = /robots.txt  {
    access_log off;
    log_not_found off;
  }

  # error_page httpステータス /設定名(ファイル名);
  # エラーステータスが404の時/404.htmlの設定を適用
  error_page 404 /404.html;
  # /404.htmlの時の設定
  location = /404.html {
  }

  # エラーステータスが500,502,503,504の時/50x.htmlの設定を適用
  error_page 500 502 503 504 /50x.html;
  # エラーステータスが500の時の設定
  location = /500.html {
  }

}